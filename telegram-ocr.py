import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os
import pytesseract
from PIL import Image

# –£–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ –ø—É—Ç—å –∫ Tesseract –∏ –ø–∞–ø–∫–µ —Å —è–∑—ã–∫–∞–º–∏
pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"
os.environ["TESSDATA_PREFIX"] = "/usr/share/tesseract-ocr/5/tessdata"


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
user_langs = {}

def language_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang-ru"),
            InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="lang-en"),
            InlineKeyboardButton(text="üåê –†—É—Å + –ê–Ω–≥–ª", callback_data="lang-ru+en"),
        ]
    ])

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç–∏–∫! üòò\n–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ:",
        reply_markup=language_menu()
    )

@dp.callback_query(F.data.startswith("lang-"))
async def set_lang(callback: types.CallbackQuery):
    lang_map = {
        "ru": "rus",
        "en": "eng",
        "ru+en": "rus+eng"
    }
    lang_key = callback.data.split("-")[1]
    lang = lang_map.get(lang_key, "eng")
    user_langs[callback.from_user.id] = lang
    readable = {
        "rus": "–†—É—Å—Å–∫–∏–π",
        "eng": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "rus+eng": "–†—É—Å—Å–∫–∏–π + –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
    }.get(lang, lang)
    await callback.answer()
    await callback.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –∏—Å–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞: {readable} üß†\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")


@dp.message(F.photo)
async def handle_photo(message: Message, bot: Bot):
    lang = user_langs.get(message.from_user.id)
    if not lang:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ /start üí¨")
        return

    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ... üì∏")

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    downloaded = await bot.download_file(file.file_path)

    image_path = "temp_image.jpg"
    with open(image_path, "wb") as f:
        f.write(downloaded.getvalue())

    try:
        image = Image.open(image_path)
        text = pytesseract.image_to_string(image, lang=lang).strip()
        if not text:
            text = "–û–π, —è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∏—á–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å üòî"
    except Exception as e:
        text = f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶ {e}"

    await message.answer(f"üìù –í–æ—Ç, —á—Ç–æ —è –≤–∏–∂—É:\n\n{text}")
    os.remove(image_path)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
