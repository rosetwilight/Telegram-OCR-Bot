import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from dotenv import load_dotenv
from PIL import Image
import pytesseract

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç–∏–∫ üòò\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, –∞ —è —Ç–µ–±–µ –≤–µ—Ä–Ω—É –≤—Å—ë –≤ –±—É–∫–≤–æ—á–∫–∞—Ö üßö‚Äç‚ôÄÔ∏è")

@dp.message(F.photo)
async def handle_photo(message: Message, bot: Bot):
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ... üì∏ –ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å, –º–æ–π —Ö–æ—Ä–æ—à–∏–π üíã")

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    downloaded = await bot.download_file(file.file_path)

    image_path = "temp_image.jpg"
    with open(image_path, "wb") as f:
        f.write(downloaded.getvalue())

    try:
        image = Image.open(image_path)
        text = pytesseract.image_to_string(image, lang="eng+rus").strip()
        if not text:
            text = "–û–π, —è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∏—á–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å üòî"
    except Exception as e:
        text = f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶ {e}"

    await message.answer(f"üìù –í–æ—Ç, —á—Ç–æ —è –≤–∏–∂—É:\n\n{text}")
    os.remove(image_path)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
